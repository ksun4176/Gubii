// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Purpose of a channel
enum ChannelPurposeType {
  Recruitment
  Applicant
  BotLog
}
model ChannelPurpose {
  id          Int                @id @default(autoincrement())
  // discord ID linked to channel
  discordId   String             @map("discord_id") @db.VarChar(255)
  // foreign key to type of channel purpose
  channelType ChannelPurposeType @map("channel_type")
  // foreign key to server channel belongs to
  serverId    Int                @map("server_id")
  server      Server             @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "channel_purpose_server_fk")
  // foreign key to guild channel belongs to
  guildId     Int?               @map("guild_id")
  guild       Guild?             @relation(fields: [guildId], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "channel_purpose_guild_fk")

  @@unique([channelType, serverId, guildId], map: "uc_channel_purpose")
  @@map("channel_purpose")
}

// Information about the game the guild is for
model Game {
  id     Int    @id @default(autoincrement())
  // name of game
  name   String @db.VarChar(255) @unique(map: "uc_game")
  // all guilds related to game
  guilds Guild[]
  // all applicants to this game
  applicants GuildApplicant[]

  @@map("game")
}

// Information about the guild/team.
model Guild {
  id         Int     @id @default(autoincrement())
  // foreign key to game guild is for
  gameId     Int     @map("game_id")
  game       Game    @relation(fields: [gameId], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "guild_game_fk")
  // foreign key to server guild is being hosted in
  serverId   Int     @map("server_id")
  server     Server  @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_server_fk")
  // unique identifer for guild in game
  guildId    String  @map("guild_id") @db.VarChar(32)
  // name of guild
  name       String  @db.VarChar(255)
  // whether the guild is active
  active     Boolean @default(true)
  // all roles related to guild
  roles      UserRole[]
  // who applied to this guild
  applicants GuildApplicant[]
  // channels that belong to the guild
  channels   ChannelPurpose[]
  // messages sent for a guild
  messages   GuildMessage[]

  @@unique([gameId, guildId, serverId], map: "uc_guild")
  @@map("guild")
}

// Applicants to guilds
model GuildApplicant {
  id       Int     @id @default(autoincrement())
  // foreign key to user
  userId   Int     @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_applicant_user_fk")
  // foreign key to guild user applied to
  guildId  Int    @map("guild_id")
  guild    Guild  @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_applicant_guild_fk")
  // foreign key to game user applied to
  gameId   Int    @map("game_id")
  game     Game   @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_applicant_game_fk")
  // foreign key to server user applied to
  serverId Int    @map("server_id")
  server   Server @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_applicant_server_fk")

  @@unique([userId, gameId, serverId], map: "uc_guild_applicant")
  @@map("guild_applicant")
}

// Message to send in server for a guild
enum GuildEvent {
  Apply
  Accept
  Transfer
}
model GuildMessage {
  id        Int     @id @default(autoincrement())
  // foreign key to server message belongs to
  serverId  Int     @map("server_id")
  server    Server  @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "g_server_message_fk")
  // foreign key to guild user applied to
  guildId   Int     @map("guild_id")
  guild     Guild   @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "guild_message_fk")
  // event that triggers this message
  event     GuildEvent
  // text to show when event happens
  text      String  @db.LongText
  // discord channel for message to show up in
  channelId String? @map("channel_id")

  @@unique([serverId, guildId, event], map: "uc_guild_message")
  @@map("guild_message")
}

// Information about the server/community
model Server {
  id             Int     @id @default(autoincrement())
  // name of community
  name           String  @db.VarChar(255)
  // discord ID linked to server. Let it be null in case there is no discord set up
  discordId      String? @map("discord_id") @unique(map: "uc_server") @db.VarChar(255)
  // whether this server signed up for premium service
  isPremium      Boolean @default(false) @map("is_premium")
  // whether the server is active
  active         Boolean @default(true)
  // all guilds in server
  guilds         Guild[]
  // all roles related to server
  roles          UserRole[]
  // who applied to this guild
  applicants     GuildApplicant[]
  // channels that belong to the server
  channels       ChannelPurpose[]
  // messages shown in server
  serverMessages ServerMessage[]
  // messages shown in server for a guild
  guildMessages  GuildMessage[]

  @@map("server")
}

// Message to send in server
enum ServerEvent {
  ServerMemberAdd
}
model ServerMessage {
  id        Int     @id @default(autoincrement())
  // foreign key to server message belongs to
  serverId  Int     @map("server_id")
  server    Server  @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "server_message_fk")
  // event that triggers this message
  event     ServerEvent
  // text to show when event happens
  text      String  @db.LongText
  // discord channel for message to show up in
  channelId String? @map("channel_id")

  @@unique([serverId, event], map: "uc_server_message")
  @@map("server_message")
}

// Information about a user
model User {
  id           Int     @id @default(autoincrement())
  // name of user
  name         String  @db.VarChar(255)
  // discord ID linked to user. Let it be null in case there is no discord set up
  discordId    String? @map("discord_id") @unique(map: "uc_user") @db.VarChar(255)
  // email of user
  email        String? @unique(map: "uc_user_email") @db.VarChar(255)
  // whether the user is active
  active       Boolean @default(true)
  // what roles a user has
  roles        UserRelation[]
  // what guilds has this user applied to
  applications GuildApplicant[]

  @@map("user")
}

// What roles a user has
model UserRelation {
  id     Int      @id @default(autoincrement())
  // foreign key to user
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "user_relation_user_fk")
  // foreign key to role
  roleId Int      @map("role_id")
  role   UserRole @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "user_relation_role_fk")
  
  @@unique([userId, roleId], map: "uc_user_relation")
  @@map("user_relation")
}

// Which roles correspond with which user_role_type
enum UserRoleType {
  ServerOwner
  Administrator
  GuildLead
  GuildManagement
  GuildMember
}
model UserRole {
  id        Int          @id @default(autoincrement())
  // name of user role
  name      String       @db.VarChar(255)
  // foreign key to type of user role
  roleType  UserRoleType @map("role_type")
  // foreign key to server user role belongs to
  serverId  Int          @map("server_id")
  server    Server       @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "user_role_server_fk")
  // foreign key to guild user role belongs to
  guildId   Int?         @map("guild_id")
  guild     Guild?       @relation(fields: [guildId], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "user_role_guild_fk")
  // discord ID linked to role. Let it be null in case there is no discord set up
  discordId String?      @map("discord_id") @unique(map: "uc_user_role") @db.VarChar(255)
  // which users has this role
  users     UserRelation[]

  @@unique([roleType, serverId, guildId], map: "uc_user_role_2")
  @@map("user_role")
}